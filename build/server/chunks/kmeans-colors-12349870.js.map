{"version":3,"file":"kmeans-colors-12349870.js","sources":["../../../.svelte-kit/adapter-node/chunks/kmeans-colors.js"],"sourcesContent":["import * as path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { execa } from \"execa\";\nimport dargs from \"dargs\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst defaultBinaryPath = path.join(__dirname, \"../bin/kmeans_colors\");\nconst args = (flags = {}) => [].concat(dargs(flags, { useEquals: false })).filter(Boolean);\nconst create = async (binaryPath) => {\n  const fn = async (flags, options) => await fn.exec(flags, options);\n  fn.binaryPath = binaryPath;\n  fn.exec = async (flags, options) => await execa(binaryPath, args(flags), options);\n  return fn;\n};\nconst defaultFlags = (imagepath) => {\n  const isString = typeof imagepath === \"string\" || imagepath instanceof String;\n  const isArray = Array.isArray(imagepath);\n  if (!isString && !isArray) {\n    throw new TypeError(\"Image path must be a string or array of image path strings.\");\n  }\n  if (isArray) {\n    imagepath = imagepath.join(\",\");\n  }\n  return {\n    \"no-file\": true,\n    print: true,\n    rgb: true,\n    sort: true,\n    pct: true,\n    input: imagepath\n  };\n};\nconst hexToRgb = (hexstring) => {\n  let rgb = hexstring.replace(\"#\", \"\").match(/.{2}/g);\n  for (let i = 0; i < rgb.length; i++) {\n    rgb[i] = hexToInt(rgb[i]);\n  }\n  return rgb;\n};\nconst rgbToCmyk = (rgb) => {\n  let b = 1;\n  let cmyk = [];\n  for (var i = 0; i < rgb.length; i++) {\n    let color = 1 - rgb[i] / 255;\n    if (color < b)\n      b = color;\n    if (b === 1)\n      color = 1;\n    else\n      color = (color - b) / (1 - b) * 100;\n    cmyk[i] = Math.round(color);\n  }\n  const cmykDigit = Math.round(b * 100);\n  cmyk.push(cmykDigit);\n  return cmyk.join(\" \");\n};\nconst hexToCmyk = (hexstring) => {\n  const rgb = hexToRgb(hexstring);\n  return rgbToCmyk(rgb);\n};\nconst hexToInt = (hexstring) => {\n  hexstring = (hexstring + \"\").replace(/[^a-f0-9]/gi, \"\");\n  return parseInt(hexstring, 16);\n};\nconst KmeansColors = await create(defaultBinaryPath);\nexport {\n  KmeansColors as K,\n  hexToCmyk as a,\n  defaultFlags as d,\n  hexToRgb as h\n};\n"],"names":[],"mappings":"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"}